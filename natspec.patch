diff --git a/CPP/7zip/Archive/Zip/ZipIn.cpp b/CPP/7zip/Archive/Zip/ZipIn.cpp
index b36b61b..3d9bcc3 100644
--- a/CPP/7zip/Archive/Zip/ZipIn.cpp
+++ b/CPP/7zip/Archive/Zip/ZipIn.cpp
@@ -2,6 +2,9 @@
 
 #include "StdAfx.h"
 
+#include <iconv.h>
+#include <natspec.h>
+
 #include "../../../../C/CpuArch.h"
 
 #include "Common/DynamicBuffer.h"
@@ -11,13 +14,15 @@
 
 #include "ZipIn.h"
 
+#include "myPrivate.h"	// global_use_utf16_conversion
+
 #define Get16(p) GetUi16(p)
 #define Get32(p) GetUi32(p)
 #define Get64(p) GetUi64(p)
 
 namespace NArchive {
 namespace NZip {
- 
+  
 HRESULT CInArchive::Open(IInStream *stream, const UInt64 *searchHeaderSizeLimit)
 {
   _inBufMode = false;
@@ -27,6 +32,10 @@ HRESULT CInArchive::Open(IInStream *stream, const UInt64 *searchHeaderSizeLimit)
   RINOK(FindAndReadMarker(stream, searchHeaderSizeLimit));
   RINOK(stream->Seek(m_Position, STREAM_SEEK_SET, NULL));
   m_Stream = stream;
+
+
+  /* Guess archive filename charset */
+  archive_oem_charset = natspec_get_charset_by_locale(NATSPEC_DOSCS, "");
   return S_OK;
 }
 
@@ -206,6 +215,13 @@ void CInArchive::ReadFileName(UInt32 nameSize, AString &dest)
   SafeReadBytes(p, nameSize);
   p[nameSize] = 0;
   dest.ReleaseBuffer();
+
+  /* Convert filename from archive charset to current locale's charset */
+  p = natspec_convert((const char *)dest, NULL, archive_oem_charset, 0);
+  if (p) {
+    dest = p;
+    free(p);
+  }
 }
 
 void CInArchive::ReadExtra(UInt32 extraSize, CExtraBlock &extraBlock,
diff --git a/CPP/7zip/Archive/Zip/ZipIn.h b/CPP/7zip/Archive/Zip/ZipIn.h
index 0565339..dadeaeb 100644
--- a/CPP/7zip/Archive/Zip/ZipIn.h
+++ b/CPP/7zip/Archive/Zip/ZipIn.h
@@ -117,6 +117,8 @@ public:
   ISequentialInStream *CreateLimitedStream(UInt64 position, UInt64 size);
   IInStream* CreateStream();
 
+  const char *archive_oem_charset;
+
   bool IsOpen() const { return m_Stream != NULL; }
 };
   
diff --git a/CPP/7zip/Archive/Zip/ZipOut.cpp b/CPP/7zip/Archive/Zip/ZipOut.cpp
index aa82143..37277b0 100644
--- a/CPP/7zip/Archive/Zip/ZipOut.cpp
+++ b/CPP/7zip/Archive/Zip/ZipOut.cpp
@@ -2,10 +2,15 @@
 
 #include "StdAfx.h"
 
+#include <iconv.h>
+#include <natspec.h>
+
 #include "../../Common/OffsetStream.h"
 
 #include "ZipOut.h"
 
+#include "myPrivate.h" // global_use_utf16_conversion
+
 namespace NArchive {
 namespace NZip {
 
@@ -17,6 +22,20 @@ void COutArchive::Create(IOutStream *outStream)
   m_OutBuffer.SetStream(outStream);
   m_OutBuffer.Init();
   m_BasePosition = 0;
+
+  /* Guess archive filename charset */
+  archive_oem_charset = natspec_get_charset_by_locale(NATSPEC_DOSCS, "");
+}
+
+void COutArchive::RecodeFileName(CItem &item) {
+	char *p;
+
+	/* Convert filename from current locale charset to archive charset. */
+	p = natspec_convert((const char *)item.Name, archive_oem_charset, NULL, 0);
+	if (p) {
+		item.Name = p;
+		free(p);
+	}
 }
 
 void COutArchive::MoveBasePosition(UInt64 distanceToMove)
diff --git a/CPP/7zip/Archive/Zip/ZipOut.h b/CPP/7zip/Archive/Zip/ZipOut.h
index 2f6349e..9cf9119 100644
--- a/CPP/7zip/Archive/Zip/ZipOut.h
+++ b/CPP/7zip/Archive/Zip/ZipOut.h
@@ -49,6 +49,9 @@ public:
   void CreateStreamForCompressing(IOutStream **outStream);
   void CreateStreamForCopying(ISequentialOutStream **outStream);
   void SeekToPackedDataPosition();
+
+  const char *archive_oem_charset;
+  void RecodeFileName(CItem &item);
 };
 
 }}
diff --git a/CPP/7zip/Archive/Zip/ZipUpdate.cpp b/CPP/7zip/Archive/Zip/ZipUpdate.cpp
index bd0c822..d0ab99e 100644
--- a/CPP/7zip/Archive/Zip/ZipUpdate.cpp
+++ b/CPP/7zip/Archive/Zip/ZipUpdate.cpp
@@ -32,12 +32,12 @@ using namespace NSynchronization;
 namespace NArchive {
 namespace NZip {
 
+/*
+ * Create DOS-compatible archives on both UNIX and Windows, to force unpackers
+ * to not recode file names from OEM to Windows encoding.
+ */
 static const Byte kHostOS =
-  #ifdef _WIN32
   NFileHeader::NHostOS::kFAT;
-  #else
-  NFileHeader::NHostOS::kUnix;
-  #endif
 
 static const Byte kMadeByHostOS = kHostOS;
 static const Byte kExtractHostOS = kHostOS;
@@ -89,6 +89,7 @@ static void SetFileHeader(
     item.NtfsATime = ui.NtfsATime;
     item.NtfsCTime = ui.NtfsCTime;
     item.NtfsTimeIsDefined = ui.NtfsTimeIsDefined;
+    archive.RecodeFileName(item);
   }
   else
     isDir = item.IsDir();
@@ -360,6 +361,7 @@ static HRESULT UpdateItemOldData(COutArchive &archive,
     item.NtfsATime = ui.NtfsATime;
     item.NtfsCTime = ui.NtfsCTime;
     item.NtfsTimeIsDefined = ui.NtfsTimeIsDefined;
+    archive.RecodeFileName(item);
 
     item.CentralExtra.RemoveUnknownSubBlocks();
     item.LocalExtra.RemoveUnknownSubBlocks();
diff --git a/makefile.linux_amd64_asm b/makefile.linux_amd64_asm
index 87e0f8d..f56aac7 100644
--- a/makefile.linux_amd64_asm
+++ b/makefile.linux_amd64_asm
@@ -16,7 +16,7 @@ ASM=yasm -f elf -m amd64
 
 PRE_COMPILED_HEADER=StdAfx.h.gch
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 CPU=x64
diff --git a/makefile.linux_any_cpu_gcc_4.X b/makefile.linux_any_cpu_gcc_4.X
index 03e69e9..866280c 100644
--- a/makefile.linux_any_cpu_gcc_4.X
+++ b/makefile.linux_any_cpu_gcc_4.X
@@ -17,7 +17,7 @@ LINK_SHARED=-fPIC -shared
 
 PRE_COMPILED_HEADER=StdAfx.h.gch
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 OBJ_CRC32=$(OBJ_CRC32_C)
diff --git a/makefile.linux_x86_asm_gcc_4.X b/makefile.linux_x86_asm_gcc_4.X
index c835d74..c1eee91 100644
--- a/makefile.linux_x86_asm_gcc_4.X
+++ b/makefile.linux_x86_asm_gcc_4.X
@@ -18,7 +18,7 @@ ASM=nasm -f elf
 
 PRE_COMPILED_HEADER=StdAfx.h.gch
 
-LOCAL_LIBS=-lpthread
+LOCAL_LIBS=-lpthread -lnatspec
 LOCAL_LIBS_DLL=$(LOCAL_LIBS) -ldl
 
 CPU=x86
